# 애플리케이션 이름 설정
# Spring Boot 애플리케이션의 이름을 정의합니다.
spring.application.name=groupware

# MySQL 데이터베이스 연결 설정

# MySQL 연결 URL
# localhost:3306 → MySQL이 실행 중인 호스트 주소와 포트 번호
# groupware → 사용할 데이터베이스 이름
# serverTimezone=UTC → 시간대를 UTC로 설정하여 타임존 문제 방지
# characterEncoding=UTF-8 → UTF-8 문자 인코딩을 사용하여 한글 깨짐 방지
spring.datasource.url=jdbc:mysql://localhost:3306/groupware?serverTimezone=UTC&characterEncoding=UTF-8

# MySQL 접속 계정 정보
# MySQL에 설정된 사용자 정보를 입력합니다.
spring.datasource.username=root
spring.datasource.password=1234

# MySQL 드라이버 클래스 지정
# MySQL과 연결할 때 필요한 JDBC 드라이버 클래스의 경로를 명시합니다.
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate Dialect 설정 (MySQL 8.x 기준)
# Hibernate가 MySQL에 맞는 SQL을 생성하도록 지정합니다.
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# Hibernate 테이블 생성 전략 설정
# 데이터베이스 스키마를 자동으로 관리하는 방법을 설정합니다.
# - `none`: 아무 작업도 하지 않음
# - `create`: 테이블을 매번 새로 생성
# - `update`: 테이블을 자동으로 업데이트
# - `validate`: 데이터베이스와 엔티티 매핑을 비교하여 불일치 시 오류 발생
# - `create-drop`: 매번 새로 생성하고 종료 시 삭제
spring.jpa.hibernate.ddl-auto=update

# 콘솔 로그 색상 및 UTF-8 설정
# ANSI 색상을 항상 사용하여 콘솔에서 로그를 보기 좋게 표시합니다.
spring.output.ansi.enabled=ALWAYS

# SQL 로그 출력 설정
# SQL 쿼리와 바인딩 파라미터를 콘솔에 출력하도록 설정합니다.
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# SQL 실행 시 쿼리 로그에 바인딩 값 출력
# Hibernate가 실행하는 SQL 쿼리에서 바인딩 파라미터를 출력합니다.
spring.jpa.properties.hibernate.use_sql_comments=true


# 데이터베이스 접속 실패 시 재시도 간격 (optional)
# 데이터베이스 연결 시 일시적인 실패를 처리하는 방법입니다.
spring.datasource.test-on-borrow=true
spring.datasource.validation-query=SELECT 1
spring.datasource.validation-query-timeout=3000
